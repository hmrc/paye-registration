# Copyright 2019 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

include "backend.conf"
# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
# Provides default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform backend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

appName=paye-registration

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"
play.modules.enabled += "config.Module"


# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="8bOF148j0p0DRhd5gAeBFfzOX0UwZdvAmdUBom0W5zPzY9Q2wcK1ISQNQvFNR9Su"

# Session configuration
# ~~~~~
application.session.httpOnly=false

application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"


# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes

# list of txids for the regId to be fetched
# txIdListToRegIdForStartupJob = "<Base64 Encoded value>"

akka.quartz {
  threadPool {
    threadCount = 1
    threadPriority = 5
    daemonThreads = true
  }
  defaultTimezone = UTC
}
schedules.remove-stale-documents-job {
  enabled         = false
  description     = "remove stale documents job"
  expression      = "0_0_0_?_*_*_*"  # Once every day at midnight.
  lockTimeout     = 600
}
schedules.metrics-job {
  enabled         = false
  description     = "metrics job"
  expression      = "0_0_0/3_?_*_*_*"  # Once every three hours on the hour.
  lockTimeout     = 600
}

api {
  payeRestartURL="http://localhost:9870/register-for-paye/re-register-as-an-employer"
  payeCancelURL="http://localhost:9870/internal/:regID/delete"
}

constants {
  maxStorageDays = 90
  maxIICounterCount = 2
}

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsLogging = false
    needsAuditing = false
  }

  controllers.RegistrationController = {
    needsLogging = false
    needsAuditing = false
  }

  controllers.RepositoryController = {
    needsLogging = false
    needsAuditing = false
  }

  controllers.test.TestEndpointController = {
    needsLogging = false
    needsAuditing = false
  }

  controllers.test.FeatureSwitchController = {
    needsLogging = false
    needsAuditing = false
  }
}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Microservice specific config
auditing {
  enabled=true
  traceRequests=true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/paye-registration"
}

# the value below is valid for local environment only
json.encryption.key = "MTIzNDU2Nzg5MDEyMzQ1Ng=="

microservice {
  metrics {
    graphite {
      host = localhost
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host=localhost
      port=8500
    }

    des-stub {
      host=localhost
      port=9642
      uri="business-registration/pay-as-you-earn"
      top-up-uri="business-registration/pay-as-you-earn"
    }

    des-service {
      environment="local"
      authorization-token="xxx-token-xxx"
    }

    incorporation-information {
      host=localhost
      port=9976
    }

    business-registration {
      host = localhost
      port = 9660
    }

    company-registration {
      host = localhost
      port = 9973
    }

    paye-registration {
      host = localhost
      port = 9873
    }

    remove-stale-documents-job {
      schedule {
        initialDelay = 15minutes
        interval = 1day
        lockTimeout = 600seconds
      }
    }
    alert-working-hours = "08:00:00_18:00:00"

    metrics-job {
      schedule {
        initialDelay = 30seconds
        interval = 180minutes
        lockTimeout = 600seconds
      }
    }
  }
}

Test {
  microservice {
    metrics {
      graphite {
        host = graphite
        port = 2003
        prefix = play.${appName}.
        enabled = false
      }
    }
    services {
      metrics-job {
        schedule {
          initialDelay = 30seconds
          interval = 180minutes
          lockTimeout = 600seconds
        }
      }
    }
  }
}
